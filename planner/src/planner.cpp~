#include <ros/ros.h>
#include <actionlib/server/simple_action_server.h>
#include <downward_msgs/downAction.h>
#include <downward_msgs/translate.h>
#include <downward_msgs/preprocess.h>
#include <downward_msgs/search.h>

class SearchAction
{
protected:

  ros::NodeHandle nh_;
  // NodeHandle instance must be created before this line. Otherwise strange error may occur.
  actionlib::SimpleActionServer<downward_msgs::downAction> as_; 
  std::string action_name_;
  // create messages that are used to published feedback/result
  downward_msgs::downFeedback feedback_;
  downward_msgs::downResult result_;

public:

  SearchAction(std::string name) :
    as_(nh_, name, boost::bind(&SearchAction::executeCB, this, _1), false),
    action_name_(name)
  {
    as_.start();
  }

  ~SearchAction(void)
  {
  }

  void executeCB(const downward_msgs::downGoalConstPtr &goal)
  {
	feedback_.feedback = "Received goal";
	as_.publishFeedback(feedback_);
	ROS_INFO("Received goal");
	feedback_.feedback = "translating to SAS";
	ROS_INFO("translating to SAS");
	as_.publishFeedback(feedback_);

	ros::ServiceClient client1 = nh_.serviceClient<downward_msgs::translate>("translator");
	downward_msgs::translate srv1;
	srv1.request.problem = goal->problem;
	srv1.request.domain = goal->domain;
	if (client1.call(srv1)){
		feedback_.feedback = "translated to SAS";
		ROS_INFO("translated to SAS");
		as_.publishFeedback(feedback_);
		feedback_.feedback = "preprocessing SAS";
		ROS_INFO("preprocessing SAS" );
		as_.publishFeedback(feedback_);
		ros::ServiceClient client2 = nh_.serviceClient<downward_msgs::preprocess>("preprocess");
		downward_msgs::preprocess srv2;
		srv2.request.output_sas = srv1.response.output;
		if (client2.call(srv2)){
			feedback_.feedback = "preprocessed to SAS";
			ROS_INFO("preprocessed SAS");
			as_.publishFeedback(feedback_);
			feedback_.feedback = "solving SAS";
			ROS_INFO("solving SAS");
			as_.publishFeedback(feedback_);
			ros::ServiceClient client3 = nh_.serviceClient<downward_msgs::search>("search");
			downward_msgs::search srv3;
			srv3.request.output = srv2.response.output;
			if (client3.call(srv3)){
				feedback_.feedback = "solved SAS";
				ROS_INFO("solved SAS");
				as_.publishFeedback(feedback_);
				result_.result = srv3.response.search;
				as_.setSucceeded(result_);
			}else{
				ROS_ERROR("unable to search");
			}
		}else{
			ROS_ERROR("unable to preprocess");
		}
	}else{
		ROS_ERROR("Unable to translate");
	}
    }	
};


int main(int argc, char** argv){
  ros::init(argc, argv, "planner");

  SearchAction search(ros::this_node::getName());
  ros::spin();

  return 0;
}




